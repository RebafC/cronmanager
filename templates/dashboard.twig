{% extends 'base.twig' %}

{% block extra_styles %}
	<link rel="stylesheet" href="/assets/css/dashboard.css">
{% endblock %}

{% block content %}
<div class="tab-buttons">
  <button class="tab-btn" data-target="executions">Executions</button>
  <button class="tab-btn" data-target="reports">Reports</button>
  <button class="tab-btn" data-target="import">Import</button>
  <button class="tab-btn" data-target="logs">Logs</button>
</div>

<div class="toolbar">
    <span>Viewing tasks from: </span>
    {% if from_system %}
        <strong>System crontab</strong>
        {% if crontab_available %}
            | <a href="?source=file">Switch to managed file</a>
        {% endif %}
    {% else %}
        <strong>Managed file</strong>
        {% if crontab_available %}
            | <a href="?source=system">Switch to system crontab</a>
        {% endif %}
    {% endif %}
</div>

{% if from_system and crontab_available %}
    <div class="alert alert-warning show">
        <p>You’re viewing the live system crontab. Click below to sync it into the app:</p>
        <form method="post" action="/sync-crontab">
            <button type="submit" class="warning">Sync Crontab</button>
        </form>
    </div>
{% endif %}

{% if applied %}
    <div class="alert alert-success show">Crontab successfully updated from app-managed task list.</div>
{% endif %}

{% if synced %}
    <div class="alert alert-success show">System crontab synced successfully.</div>
{% endif %}

{% if not from_system and crontab_available and show_apply_button %}
    <form method="post" action="/apply-crontab">
        <button type="submit" class="success">Apply to System Crontab</button>
    </form>
{% endif %}

{% include 'partials/tasks.twig' %}
{% include 'partials/add.twig' %}
{% include 'partials/executions.twig' %}
{% include 'partials/reports.twig' %}
{% include 'partials/import.twig' %}
{% include 'partials/logs.twig' %}
{% endblock %}

{% block scripts %}
<script>
function executeTask(command) {
    if (!confirm(`Execute this command?\n\n${command}`)) return;

    document.getElementById('spinner').style.display = 'flex';

    const payload = new FormData();
    payload.append('action', 'execute');
    payload.append('command', command);

    fetch('', {
        method: 'POST',
        body: payload
    })
    .then(response => response.text())
    .then(html => {
        const parser = new DOMParser();
        const doc = parser.parseFromString(html, 'text/html');
        document.body.innerHTML = doc.body.innerHTML;
        document.getElementById('spinner').style.display = 'none';

        // Automatically switch to the "Executions" tab after update
        setTimeout(() => {
            const executionsTab = document.querySelector('.tab[onclick*="executions"]');
            if (executionsTab) executionsTab.click();
        }, 50);
    })
    .catch(error => {
        showFeedback('❌ Failed to execute.', 'error');
        console.error(error);
    });

    return false;
}

function deleteTask(taskId) {
    if (!confirm('Are you sure you want to delete this task?')) return;

    document.getElementById('spinner').style.display = 'flex';

    const payload = new FormData();
    payload.append('action', 'delete');
    payload.append('task_id', taskId);

    fetch('', {
        method: 'POST',
        body: payload
    })
    .then(response => response.text())
    .then(html => {
        const parser = new DOMParser();
        const doc = parser.parseFromString(html, 'text/html');
        document.body.innerHTML = doc.body.innerHTML;
        document.getElementById('spinner').style.display = 'none';
    })
    .catch(error => {
        alert('Failed to delete task. Check console for details.');
        console.error(error);
    });
}

function updateTask(form) {
    const row = form.closest('tr');
    const taskId = form.querySelector('[name="task_id"]').value;

    const payload = new FormData(form);

    document.getElementById('spinner').style.display = 'flex';

    // Disable inputs during update
    form.querySelectorAll('input, button').forEach(el => el.disabled = true);
    row.style.opacity = 0.5;

    fetch('', {
        method: 'POST',
        body: payload
    })
    .then(response => response.text())
    .then(html => {
        const parser = new DOMParser();
        const doc = parser.parseFromString(html, 'text/html');
        document.body.innerHTML = doc.body.innerHTML;
        document.getElementById('spinner').style.display = 'none';

        // Show feedback
        showFeedback('✏️ Task updated.');

        // Optional: Scroll to updated row
        const newRow = document.getElementById(`edit-${taskId}`);
        if (newRow) {
            setTimeout(() => newRow.scrollIntoView({ behavior: 'smooth', block: 'center' }), 100);
        }
    })
    .catch(error => {
        showFeedback('❌ Update failed.', 'error');
        console.error(error);
    });

    return false;
}

function editTask(id, schedule, command) {
    document.querySelectorAll('.edit-form').forEach(el => el.classList.remove('active'));
    const editRow = document.getElementById('edit-' + id);
    if (editRow) editRow.classList.add('active');
}

function cancelEdit(id) {
    const editRow = document.getElementById('edit-' + id);
    if (editRow) editRow.classList.remove('active');
}

function showFeedback(message, type = 'success') {
    const feedback = document.getElementById('feedback');
    const icons = {
        success: '✅',
        error: '❌',
        info: 'ℹ️',
        warning: '⚠️'
    };

    const icon = icons[type] || '';
    feedback.innerHTML = `${icon} ${message}`;
    feedback.className = `alert alert-${type} show`;

    setTimeout(() => {
        feedback.classList.remove('show');
        feedback.innerHTML = '';
    }, 4000);
}

document.addEventListener('DOMContentLoaded', function () {
    const input = document.querySelector('input[name="command"]');
    const limit = 512;
    const warnThreshold = 502; // 10 chars before limit

    if (input) {
        input.addEventListener('input', function () {
            if (input.value.length >= warnThreshold) {
                input.style.backgroundColor = '#fff3cd'; // light yellow
            } else {
                input.style.backgroundColor = '';
            }
        });
    }
});

document.addEventListener('DOMContentLoaded', () => {
    const updated = document.querySelector('tr.just-updated');
    if (updated) {
        setTimeout(() => updated.classList.remove('just-updated'), 3000);
    }
});

ocument.addEventListener('DOMContentLoaded', () => {
  const buttons = document.querySelectorAll('.tab-btn');
  const tabs = document.querySelectorAll('.tab-content');

  buttons.forEach(btn => {
    btn.addEventListener('click', () => {
      // Remove .active from all buttons
      buttons.forEach(b => b.classList.remove('active'));
      // Add .active to the clicked button
      btn.classList.add('active');

      // Hide all tab content
      tabs.forEach(tab => tab.classList.remove('active'));

      // Show selected tab
      const targetId = btn.getAttribute('data-target');
      const targetTab = document.getElementById(targetId);
      if (targetTab) {
        targetTab.classList.add('active');
      }
    });
  });
});

</script>
{% endblock %}

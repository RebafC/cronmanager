<?php
// composer.json
{
    "name": "yourname/cron-manager",
    "description": "A PHP application for managing cron tasks",
    "require": {
        "php": ">=8.2"
    },
    "autoload": {
        "psr-4": {
            "CronManager\\": "src/"
        }
    }
}

// src/Auth.php
<?php

declare(strict_types=1);

namespace CronManager;

class Auth
{
    private string $sessionFile;
    private int $sessionTimeout;

    public function __construct(string $sessionFile = 'sessions.json', int $sessionTimeout = 3600)
    {
        $this->sessionFile = $sessionFile;
        $this->sessionTimeout = $sessionTimeout;
        
        if (session_status() === PHP_SESSION_NONE) {
            session_start();
        }
    }

    public function login(string $username, string $password): bool
    {
        // In production, use proper password hashing and database storage
        $users = [
            'admin' => password_hash('your_secure_password', PASSWORD_DEFAULT),
            // Add more users as needed
        ];

        if (isset($users[$username]) && password_verify($password, $users[$username])) {
            $_SESSION['user_id'] = $username;
            $_SESSION['login_time'] = time();
            $this->logUserActivity($username, 'LOGIN');
            return true;
        }

        $this->logUserActivity($username, 'FAILED_LOGIN');
        return false;
    }

    public function logout(): void
    {
        if (isset($_SESSION['user_id'])) {
            $this->logUserActivity($_SESSION['user_id'], 'LOGOUT');
        }
        
        session_destroy();
    }

    public function isLoggedIn(): bool
    {
        if (!isset($_SESSION['user_id']) || !isset($_SESSION['login_time'])) {
            return false;
        }

        // Check session timeout
        if (time() - $_SESSION['login_time'] > $this->sessionTimeout) {
            $this->logout();
            return false;
        }

        return true;
    }

    public function getCurrentUser(): ?string
    {
        return $_SESSION['user_id'] ?? null;
    }

    public function requireAuth(): void
    {
        if (!$this->isLoggedIn()) {
            $this->showLoginForm();
            exit;
        }
    }

    private function logUserActivity(string $username, string $action): void
    {
        $logEntry = [
            'timestamp' => date('Y-m-d H:i:s'),
            'username' => $username,
            'action' => $action,
            'ip' => $_SERVER['REMOTE_ADDR'] ?? 'unknown'
        ];
        
        file_put_contents('auth.log', json_encode($logEntry) . "\n", FILE_APPEND | LOCK_EX);
    }

    private function showLoginForm(): void
    {
        ?>
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Cron Manager - Login</title>
            <style>
                body {
                    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    height: 100vh;
                    margin: 0;
                    display: flex;
                    justify-content: center;
                    align-items: center;
                }
                .login-container {
                    background: white;
                    padding: 40px;
                    border-radius: 10px;
                    box-shadow: 0 10px 30px rgba(0,0,0,0.2);
                    width: 100%;
                    max-width: 400px;
                }
                h1 {
                    text-align: center;
                    color: #333;
                    margin-bottom: 30px;
                }
                .form-group {
                    margin-bottom: 20px;
                }
                label {
                    display: block;
                    margin-bottom: 5px;
                    font-weight: 600;
                    color: #555;
                }
                input[type="text"], input[type="password"] {
                    width: 100%;
                    padding: 12px;
                    border: 2px solid #ddd;
                    border-radius: 5px;
                    font-size: 14px;
                    box-sizing: border-box;
                }
                input[type="text"]:focus, input[type="password"]:focus {
                    outline: none;
                    border-color: #667eea;
                }
                button {
                    width: 100%;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    color: white;
                    padding: 12px;
                    border: none;
                    border-radius: 5px;
                    cursor: pointer;
                    font-size: 16px;
                    font-weight: 500;
                }
                button:hover {
                    opacity: 0.9;
                }
                .error {
                    color: #dc3545;
                    text-align: center;
                    margin-top: 15px;
                }
            </style>
        </head>
        <body>
            <div class="login-container">
                <h1>üîê Cron Manager</h1>
                <?php if (isset($_POST['login']) && !$this->login($_POST['username'] ?? '', $_POST['password'] ?? '')): ?>
                    <div class="error">Invalid username or password</div>
                <?php endif; ?>
                <form method="post">
                    <div class="form-group">
                        <label for="username">Username:</label>
                        <input type="text" id="username" name="username" required>
                    </div>
                    <div class="form-group">
                        <label for="password">Password:</label>
                        <input type="password" id="password" name="password" required>
                    </div>
                    <button type="submit" name="login">Login</button>
                </form>
            </div>
        </body>
        </html>
        <?php
    }
}

// src/CronManager.php
<?php

declare(strict_types=1);

namespace CronManager;

use DateTime;
use Exception;

class CronManager
{
    private string $cronFile;
    private string $logFile;
    private bool $isWindows;

    public function __construct(string $cronFile = '', string $logFile = 'cron_tasks.log')
    {
        $this->isWindows = PHP_OS_FAMILY === 'Windows';
        $this->cronFile = $cronFile ?: ($this->isWindows ? 'crontab.txt' : '/tmp/crontab_backup');
        $this->logFile = $logFile;
        
        $this->initializeFiles();
    }

    private function initializeFiles(): void
    {
        if (!file_exists($this->cronFile)) {
            touch($this->cronFile);
        }
        
        if (!file_exists($this->logFile)) {
            touch($this->logFile);
        }
    }

    public function getCronTasks(): array
    {
        $content = file_get_contents($this->cronFile);
        $lines = array_filter(explode("\n", $content), fn($line) => !empty(trim($line)) && !str_starts_with(trim($line), '#'));
        
        $tasks = [];
        foreach ($lines as $index => $line) {
            $task = $this->parseCronLine($line, $index);
            if ($task) {
                $tasks[] = $task;
            }
        }
        
        return $tasks;
    }

    private function parseCronLine(string $line, int $index): ?array
    {
        $line = trim($line);
        if (empty($line) || str_starts_with($line, '#')) {
            return null;
        }

        $parts = preg_split('/\s+/', $line, 6);
        if (count($parts) < 6) {
            return null;
        }

        return [
            'id' => $index,
            'minute' => $parts[0],
            'hour' => $parts[1],
            'day' => $parts[2],
            'month' => $parts[3],
            'weekday' => $parts[4],
            'command' => $parts[5],
            'schedule' => implode(' ', array_slice($parts, 0, 5)),
            'full_line' => $line,
            'description' => $this->generateDescription($parts[0], $parts[1], $parts[2], $parts[3], $parts[4])
        ];
    }

    private function generateDescription(string $min, string $hour, string $day, string $month, string $weekday): string
    {
        $parts = [];
        
        if ($min === '*') {
            $parts[] = 'every minute';
        } elseif (str_contains($min, '/')) {
            $interval = explode('/', $min)[1];
            $parts[] = "every {$interval} minutes";
        } else {
            $parts[] = "at minute {$min}";
        }
        
        if ($hour !== '*') {
            if (str_contains($hour, '/')) {
                $interval = explode('/', $hour)[1];
                $parts[] = "every {$interval} hours";
            } else {
                $parts[] = "at hour {$hour}";
            }
        }
        
        if ($day !== '*') {
            $parts[] = "on day {$day}";
        }
        
        if ($month !== '*') {
            $parts[] = "in month {$month}";
        }
        
        if ($weekday !== '*') {
            $days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
            $dayName = is_numeric($weekday) ? ($days[(int)$weekday] ?? "day {$weekday}") : $weekday;
            $parts[] = "on {$dayName}";
        }
        
        return implode(', ', $parts);
    }

    public function addTask(string $schedule, string $command): bool
    {
        $cronLine = "{$schedule} {$command}\n";
        
        if (file_put_contents($this->cronFile, $cronLine, FILE_APPEND | LOCK_EX) !== false) {
            $this->logTask('ADDED', $cronLine);
            $this->updateSystemCron();
            return true;
        }
        
        return false;
    }

    public function deleteTask(int $taskId): bool
    {
        $tasks = file($this->cronFile, FILE_IGNORE_NEW_LINES);
        
        if (!isset($tasks[$taskId])) {
            return false;
        }
        
        $deletedTask = $tasks[$taskId];
        unset($tasks[$taskId]);
        
        if (file_put_contents($this->cronFile, implode("\n", $tasks) . "\n", LOCK_EX) !== false) {
            $this->logTask('DELETED', $deletedTask);
            $this->updateSystemCron();
            return true;
        }
        
        return false;
    }

    public function updateTask(int $taskId, string $schedule, string $command): bool
    {
        $tasks = file($this->cronFile, FILE_IGNORE_NEW_LINES);
        
        if (!isset($tasks[$taskId])) {
            return false;
        }
        
        $oldTask = $tasks[$taskId];
        $newTask = "{$schedule} {$command}";
        $tasks[$taskId] = $newTask;
        
        if (file_put_contents($this->cronFile, implode("\n", $tasks) . "\n", LOCK_EX) !== false) {
            $this->logTask('UPDATED', "FROM: {$oldTask} TO: {$newTask}");
            $this->updateSystemCron();
            return true;
        }
        
        return false;
    }

    private function updateSystemCron(): void
    {
        if (!$this->isWindows) {
            exec("crontab {$this->cronFile}");
        }
    }

    public function logTask(string $action, string $details): void
    {
        $timestamp = (new DateTime())->format('Y-m-d H:i:s');
        $logEntry = "[{$timestamp}] {$action}: {$details}\n";
        file_put_contents($this->logFile, $logEntry, FILE_APPEND | LOCK_EX);
    }

    public function getTaskLogs(int $limit = 50): array
    {
        if (!file_exists($this->logFile)) {
            return [];
        }
        
        $logs = file($this->logFile, FILE_IGNORE_NEW_LINES);
        return array_slice(array_reverse($logs), 0, $limit);
    }

    public function getTaskExecutions(int $limit = 100): array
    {
        $executionFile = str_replace('.log', '_executions.log', $this->logFile);
        
        if (!file_exists($executionFile)) {
            return [];
        }
        
        $executions = [];
        $lines = file($executionFile, FILE_IGNORE_NEW_LINES);
        
        foreach (array_reverse(array_slice($lines, -$limit)) as $line) {
            if (empty(trim($line))) {
                continue;
            }
            
            $execution = json_decode($line, true);
            if ($execution) {
                $executions[] = $execution;
            }
        }
        
        return $executions;
    }

    public function logTaskExecution(string $command, int $exitCode, float $duration, string $output = '', string $error = ''): void
    {
        $executionFile = str_replace('.log', '_executions.log', $this->logFile);
        
        $execution = [
            'timestamp' => (new DateTime())->format('Y-m-d H:i:s'),
            'command' => $command,
            'exit_code' => $exitCode,
            'duration' => round($duration, 3),
            'output' => substr($output, 0, 1000), // Limit output length
            'error' => substr($error, 0, 1000),
            'status' => $exitCode === 0 ? 'SUCCESS' : 'FAILED'
        ];
        
        file_put_contents($executionFile, json_encode($execution) . "\n", FILE_APPEND | LOCK_EX);
    }

    public function getTaskStatistics(int $days = 30): array
    {
        $executions = $this->getTaskExecutions(1000);
        $cutoffDate = (new DateTime())->modify("-{$days} days");
        
        $stats = [
            'total_executions' => 0,
            'successful_executions' => 0,
            'failed_executions' => 0,
            'average_duration' => 0,
            'commands' => [],
            'recent_failures' => [],
            'execution_trend' => []
        ];
        
        $totalDuration = 0;
        $dailyStats = [];
        
        foreach ($executions as $execution) {
            $execDate = new DateTime($execution['timestamp']);
            
            if ($execDate < $cutoffDate) {
                continue;
            }
            
            $stats['total_executions']++;
            $totalDuration += $execution['duration'];
            
            if ($execution['status'] === 'SUCCESS') {
                $stats['successful_executions']++;
            } else {
                $stats['failed_executions']++;
                if (count($stats['recent_failures']) < 10) {
                    $stats['recent_failures'][] = $execution;
                }
            }
            
            // Command statistics
            $cmd = $execution['command'];
            if (!isset($stats['commands'][$cmd])) {
                $stats['commands'][$cmd] = [
                    'total' => 0,
                    'success' => 0,
                    'failed' => 0,
                    'avg_duration' => 0,
                    'total_duration' => 0
                ];
            }
            
            $stats['commands'][$cmd]['total']++;
            $stats['commands'][$cmd]['total_duration'] += $execution['duration'];
            
            if ($execution['status'] === 'SUCCESS') {
                $stats['commands'][$cmd]['success']++;
            } else {
                $stats['commands'][$cmd]['failed']++;
            }
            
            // Daily trend
            $day = $execDate->format('Y-m-d');
            if (!isset($dailyStats[$day])) {
                $dailyStats[$day] = ['total' => 0, 'success' => 0, 'failed' => 0];
            }
            $dailyStats[$day]['total']++;
            if ($execution['status'] === 'SUCCESS') {
                $dailyStats[$day]['success']++;
            } else {
                $dailyStats[$day]['failed']++;
            }
        }
        
        // Calculate averages
        if ($stats['total_executions'] > 0) {
            $stats['average_duration'] = round($totalDuration / $stats['total_executions'], 3);
        }
        
        foreach ($stats['commands'] as $cmd => &$cmdStats) {
            if ($cmdStats['total'] > 0) {
                $cmdStats['avg_duration'] = round($cmdStats['total_duration'] / $cmdStats['total'], 3);
                $cmdStats['success_rate'] = round(($cmdStats['success'] / $cmdStats['total']) * 100, 1);
            }
        }
        
        $stats['execution_trend'] = $dailyStats;
        $stats['success_rate'] = $stats['total_executions'] > 0 ? 
            round(($stats['successful_executions'] / $stats['total_executions']) * 100, 1) : 0;
        
        return $stats;
    }

    public function executeTask(string $command): array
    {
        $startTime = microtime(true);
        $output = '';
        $error = '';
        
        // Execute command and capture output
        $descriptors = [
            0 => ['pipe', 'r'],  // stdin
            1 => ['pipe', 'w'],  // stdout
            2 => ['pipe', 'w']   // stderr
        ];
        
        $process = proc_open($command, $descriptors, $pipes);
        
        if (is_resource($process)) {
            fclose($pipes[0]); // Close stdin
            
            $output = stream_get_contents($pipes[1]);
            $error = stream_get_contents($pipes[2]);
            
            fclose($pipes[1]);
            fclose($pipes[2]);
            
            $exitCode = proc_close($process);
        } else {
            $exitCode = -1;
            $error = 'Failed to start process';
        }
        
        $duration = microtime(true) - $startTime;
        
        // Log the execution
        $this->logTaskExecution($command, $exitCode, $duration, $output, $error);
        
        return [
            'exit_code' => $exitCode,
            'duration' => round($duration, 3),
            'output' => $output,
            'error' => $error,
            'success' => $exitCode === 0
        ];
    }

    public function trackExternalExecution(array $data): bool
    {
        $required = ['task_id', 'command', 'status', 'duration'];
        foreach ($required as $field) {
            if (!isset($data[$field])) {
                return false;
            }
        }

        $exitCode = $data['status'] === 'success' ? 0 : ($data['exit_code'] ?? 1);
        $output = $data['output'] ?? '';
        $error = $data['error'] ?? '';
        $duration = (float)$data['duration'];

        $this->logTaskExecution(
            $data['command'], 
            $exitCode, 
            $duration, 
            $output, 
            $error,
            $data['task_id']
        );

        return true;
    }

    public function logTaskExecution(string $command, int $exitCode, float $duration, string $output = '', string $error = '', string $taskId = ''): void
    {
        $executionFile = str_replace('.log', '_executions.log', $this->logFile);
        
        $execution = [
            'timestamp' => (new DateTime())->format('Y-m-d H:i:s'),
            'task_id' => $taskId ?: md5($command . time()),
            'command' => $command,
            'exit_code' => $exitCode,
            'duration' => round($duration, 3),
            'output' => substr($output, 0, 1000), // Limit output length
            'error' => substr($error, 0, 1000),
            'status' => $exitCode === 0 ? 'SUCCESS' : 'FAILED',
            'source' => $taskId ? 'external' : 'manual'
        ];
        
        file_put_contents($executionFile, json_encode($execution) . "\n", FILE_APPEND | LOCK_EX);
    }

    public function generateWrapperScript(): string
    {
        $baseUrl = $this->getBaseUrl();
        $apiKey = $this->getApiKey();
        
        return <<<BASH
#!/bin/bash

# Cron Task Wrapper Script
# Usage: ./cron-wrapper.sh "task-id" "command to execute"

TASK_ID="\$1"
COMMAND="\$2"
API_URL="{$baseUrl}/api/track-completion"
API_KEY="{$apiKey}"

if [ -z "\$TASK_ID" ] || [ -z "\$COMMAND" ]; then
    echo "Usage: \$0 <task-id> <command>"
    exit 1
fi

echo "Starting task: \$TASK_ID"
echo "Command: \$COMMAND"

START_TIME=\$(date +%s.%N)

# Execute the command and capture output
OUTPUT=\$(eval "\$COMMAND" 2>&1)
EXIT_CODE=\$?

END_TIME=\$(date +%s.%N)
DURATION=\$(echo "\$END_TIME - \$START_TIME" | bc)

# Determine status
if [ \$EXIT_CODE -eq 0 ]; then
    STATUS="success"
else
    STATUS="failed"
fi

echo "Task completed with exit code: \$EXIT_CODE"
echo "Duration: \$DURATION seconds"

# Send tracking data to API
curl -s -X POST "\$API_URL" \\
    -H "Content-Type: application/json" \\
    -H "X-API-Key: \$API_KEY" \\
    -d "{
        \"task_id\": \"\$TASK_ID\",
        \"command\": \"\$COMMAND\",
        \"status\": \"\$STATUS\",
        \"exit_code\": \$EXIT_CODE,
        \"duration\": \$DURATION,
        \"output\": \"\$(echo \"\$OUTPUT\" | head -c 1000 | sed 's/"/\\\\"/g')\",
        \"timestamp\": \"\$(date -Iseconds)\"
    }" >/dev/null 2>&1

exit \$EXIT_CODE
BASH;
    }

    private function getBaseUrl(): string
    {
        $protocol = isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on' ? 'https' : 'http';
        $host = $_SERVER['HTTP_HOST'] ?? 'localhost';
        return "{$protocol}://{$host}";
    }

    private function getApiKey(): string
    {
        // Generate or retrieve API key
        $keyFile = 'api_key.txt';
        if (!file_exists($keyFile)) {
            $apiKey = bin2hex(random_bytes(32));
            file_put_contents($keyFile, $apiKey);
        } else {
            $apiKey = trim(file_get_contents($keyFile));
        }
        return $apiKey;
    }

    public function validateApiKey(string $providedKey): bool
    {
        return hash_equals($this->getApiKey(), $providedKey);
    }

    public function exportCron(): string
    {
        return file_get_contents($this->cronFile);
    }

    public function importCron(string $content): bool
    {
        if (file_put_contents($this->cronFile, $content, LOCK_EX) !== false) {
            $this->logTask('IMPORTED', 'Cron file imported');
            $this->updateSystemCron();
            return true;
        }
        
        return false;
    }

    public function validateCronSchedule(string $schedule): bool
    {
        $parts = explode(' ', $schedule);
        if (count($parts) !== 5) {
            return false;
        }
        
        $ranges = [
            [0, 59],  // minute
            [0, 23],  // hour
            [1, 31],  // day
            [1, 12],  // month
            [0, 7]    // weekday
        ];
        
        foreach ($parts as $index => $part) {
            if (!$this->validateCronField($part, $ranges[$index][0], $ranges[$index][1])) {
                return false;
            }
        }
        
        return true;
    }

    private function validateCronField(string $field, int $min, int $max): bool
    {
        if ($field === '*') {
            return true;
        }
        
        if (str_contains($field, '/')) {
            $parts = explode('/', $field);
            if (count($parts) !== 2) {
                return false;
            }
            return $this->validateCronField($parts[0], $min, $max) && is_numeric($parts[1]);
        }
        
        if (str_contains($field, '-')) {
            $parts = explode('-', $field);
            if (count($parts) !== 2) {
                return false;
            }
            return is_numeric($parts[0]) && is_numeric($parts[1]) && 
                   (int)$parts[0] >= $min && (int)$parts[1] <= $max &&
                   (int)$parts[0] <= (int)$parts[1];
        }
        
        if (str_contains($field, ',')) {
            $parts = explode(',', $field);
            foreach ($parts as $part) {
                if (!$this->validateCronField(trim($part), $min, $max)) {
                    return false;
                }
            }
            return true;
        }
        
        return is_numeric($field) && (int)$field >= $min && (int)$field <= $max;
    }
}

// public/index.php
<?php

declare(strict_types=1);

require_once __DIR__ . '/../vendor/autoload.php';

use CronManager\CronManager;

$cronManager = new CronManager();
$message = '';
$error = '';

// Handle form submissions
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    try {
        switch ($_POST['action'] ?? '') {
            case 'add':
                $schedule = trim($_POST['schedule'] ?? '');
                $command = trim($_POST['command'] ?? '');
                
                if (empty($schedule) || empty($command)) {
                    $error = 'Schedule and command are required.';
                } elseif (!$cronManager->validateCronSchedule($schedule)) {
                    $error = 'Invalid cron schedule format.';
                } elseif ($cronManager->addTask($schedule, $command)) {
                    $message = 'Task added successfully.';
                } else {
                    $error = 'Failed to add task.';
                }
                break;
                
            case 'delete':
                $taskId = (int)($_POST['task_id'] ?? 0);
                if ($cronManager->deleteTask($taskId)) {
                    $message = 'Task deleted successfully.';
                } else {
                    $error = 'Failed to delete task.';
                }
                break;
                
            case 'update':
                $taskId = (int)($_POST['task_id'] ?? 0);
                $schedule = trim($_POST['schedule'] ?? '');
                $command = trim($_POST['command'] ?? '');
                
                if (empty($schedule) || empty($command)) {
                    $error = 'Schedule and command are required.';
                } elseif (!$cronManager->validateCronSchedule($schedule)) {
                    $error = 'Invalid cron schedule format.';
                } elseif ($cronManager->updateTask($taskId, $schedule, $command)) {
                    $message = 'Task updated successfully.';
                } else {
                    $error = 'Failed to update task.';
                }
                break;
                
            case 'import':
                $content = $_POST['cron_content'] ?? '';
                if (!empty($content) && $cronManager->importCron($content)) {
                    $message = 'Cron content imported successfully.';
                } else {
                    $error = 'Failed to import cron content.';
                }
                break;
        }
    } catch (Exception $e) {
        $error = 'An error occurred: ' . $e->getMessage();
    }
}

// Handle manual task execution
if ($_SERVER['REQUEST_METHOD'] === 'POST' && ($_POST['action'] ?? '') === 'execute') {
    $command = trim($_POST['command'] ?? '');
    if (!empty($command)) {
        $result = $cronManager->executeTask($command);
        if ($result['success']) {
            $message = "Task executed successfully in {$result['duration']}s";
        } else {
            $error = "Task failed with exit code {$result['exit_code']}";
        }
    }
}

$tasks = $cronManager->getCronTasks();
$logs = $cronManager->getTaskLogs(20);
$executions = $cronManager->getTaskExecutions(50);
$stats = $cronManager->getTaskStatistics(30);

?><!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cron Task Manager</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
        }
        
        .container {
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }
        
        h1, h2 {
            color: #333;
            margin-bottom: 20px;
        }
        
        .alert {
            padding: 15px;
            margin: 20px 0;
            border-radius: 5px;
            font-weight: 500;
        }
        
        .alert-success {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        
        .alert-error {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: 600;
            color: #555;
        }
        
        input[type="text"], textarea {
            width: 100%;
            padding: 12px;
            border: 2px solid #ddd;
            border-radius: 5px;
            font-size: 14px;
            transition: border-color 0.3s;
        }
        
        input[type="text"]:focus, textarea:focus {
            outline: none;
            border-color: #007bff;
        }
        
        textarea {
            resize: vertical;
            min-height: 100px;
        }
        
        button {
            background-color: #007bff;
            color: white;
            padding: 12px 24px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: background-color 0.3s;
        }
        
        button:hover {
            background-color: #0056b3;
        }
        
        button.danger {
            background-color: #dc3545;
        }
        
        button.danger:hover {
            background-color: #c82333;
        }
        
        button.warning {
            background-color: #ffc107;
            color: #212529;
        }
        
        button.warning:hover {
            background-color: #e0a800;
        }
        
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }
        
        th, td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
        
        th {
            background-color: #f8f9fa;
            font-weight: 600;
            color: #555;
        }
        
        tr:hover {
            background-color: #f8f9fa;
        }
        
        .task-actions {
            display: flex;
            gap: 10px;
        }
        
        .task-actions button {
            padding: 6px 12px;
            font-size: 12px;
        }
        
        .schedule-example {
            background-color: #f8f9fa;
            padding: 15px;
            border-radius: 5px;
            margin-top: 10px;
            font-size: 13px;
            color: #666;
        }
        
        .logs {
            max-height: 300px;
            overflow-y: auto;
            background-color: #f8f9fa;
            padding: 15px;
            border-radius: 5px;
            font-family: 'Courier New', monospace;
            font-size: 12px;
        }
        
        .tab-container {
            margin-bottom: 20px;
        }
        
        .tabs {
            display: flex;
            border-bottom: 2px solid #ddd;
            margin-bottom: 20px;
        }
        
        .tab {
            padding: 12px 24px;
            background: none;
            border: none;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            color: #666;
            border-bottom: 2px solid transparent;
        }
        
        .tab.active {
            color: #007bff;
            border-bottom-color: #007bff;
        }
        
        .tab-content {
            display: none;
        }
        
        .tab-content.active {
            display: block;
        }
        
        .edit-form {
            display: none;
            background-color: #f8f9fa;
            padding: 15px;
            border-radius: 5px;
            margin-top: 10px;
        }
        
        .edit-form.active {
            display: block;
        }
        
        .code {
            font-family: 'Courier New', monospace;
            background-color: #f8f9fa;
            padding: 2px 6px;
            border-radius: 3px;
            font-size: 13px;
        }
        
        .stat-card {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            border-left: 4px solid #007bff;
        }
        
        .stat-card h3 {
            margin: 0 0 15px 0;
            color: #333;
            font-size: 16px;
        }
        
        .stat-card p {
            margin: 5px 0;
            color: #666;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üïí Cron Task Manager</h1>
        
        <?php if ($message): ?>
            <div class="alert alert-success"><?= htmlspecialchars($message) ?></div>
        <?php endif; ?>
        
        <?php if ($error): ?>
            <div class="alert alert-error"><?= htmlspecialchars($error) ?></div>
        <?php endif; ?>
        
        <div class="tab-container">
            <div class="tabs">
                <button class="tab active" onclick="showTab('tasks')">Tasks</button>
                <button class="tab" onclick="showTab('add')">Add Task</button>
                <button class="tab" onclick="showTab('executions')">Executions</button>
                <button class="tab" onclick="showTab('reports')">Reports</button>
                <button class="tab" onclick="showTab('import')">Import/Export</button>
                <button class="tab" onclick="showTab('logs')">Activity Logs</button>
            </div>
            
            <div id="tasks" class="tab-content active">
                <h2>Current Tasks</h2>
                
                <?php if (empty($tasks)): ?>
                    <p>No cron tasks found.</p>
                <?php else: ?>
                    <table>
                        <thead>
                            <tr>
                                <th>Schedule</th>
                                <th>Command</th>
                                <th>Description</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <?php foreach ($tasks as $task): ?>
                                <tr>
                                    <td><span class="code"><?= htmlspecialchars($task['schedule']) ?></span></td>
                                    <td><span class="code"><?= htmlspecialchars($task['command']) ?></span></td>
                                    <td><?= htmlspecialchars($task['description']) ?></td>
                                    <td>
                                        <div class="task-actions">
                                            <button class="warning" onclick="editTask(<?= $task['id'] ?>, '<?= htmlspecialchars($task['schedule']) ?>', '<?= htmlspecialchars($task['command']) ?>')">Edit</button>
                                            <form method="post" style="display: inline;">
                                                <input type="hidden" name="action" value="execute">
                                                <input type="hidden" name="command" value="<?= htmlspecialchars($task['command']) ?>">
                                                <button type="submit" style="background-color: #28a745;">Execute</button>
                                            </form>
                                            <form method="post" style="display: inline;">
                                                <input type="hidden" name="action" value="delete">
                                                <input type="hidden" name="task_id" value="<?= $task['id'] ?>">
                                                <button type="submit" class="danger" onclick="return confirm('Are you sure you want to delete this task?')">Delete</button>
                                            </form>
                                        </div>
                                    </td>
                                </tr>
                                <tr id="edit-<?= $task['id'] ?>" class="edit-form">
                                    <td colspan="4">
                                        <form method="post">
                                            <input type="hidden" name="action" value="update">
                                            <input type="hidden" name="task_id" value="<?= $task['id'] ?>">
                                            <div style="display: flex; gap: 15px; align-items: end;">
                                                <div style="flex: 1;">
                                                    <label>Schedule:</label>
                                                    <input type="text" name="schedule" value="<?= htmlspecialchars($task['schedule']) ?>" required>
                                                </div>
                                                <div style="flex: 2;">
                                                    <label>Command:</label>
                                                    <input type="text" name="command" value="<?= htmlspecialchars($task['command']) ?>" required>
                                                </div>
                                                <div>
                                                    <button type="submit">Update</button>
                                                    <button type="button" onclick="cancelEdit(<?= $task['id'] ?>)">Cancel</button>
                                                </div>
                                            </div>
                                        </form>
                                    </td>
                                </tr>
                            <?php endforeach; ?>
                        </tbody>
                    </table>
                <?php endif; ?>
            </div>
            
            <div id="add" class="tab-content">
                <h2>Add New Task</h2>
                
                <form method="post">
                    <input type="hidden" name="action" value="add">
                    
                    <div class="form-group">
                        <label for="schedule">Cron Schedule:</label>
                        <input type="text" id="schedule" name="schedule" placeholder="0 0 * * *" required>
                        <div class="schedule-example">
                            <strong>Examples:</strong><br>
                            <span class="code">0 0 * * *</span> - Daily at midnight<br>
                            <span class="code">0 */6 * * *</span> - Every 6 hours<br>
                            <span class="code">*/15 * * * *</span> - Every 15 minutes<br>
                            <span class="code">0 9 * * 1</span> - Every Monday at 9 AM<br>
                            <span class="code">0 0 1 * *</span> - First day of every month
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label for="command">Command:</label>
                        <input type="text" id="command" name="command" placeholder="/usr/bin/php /path/to/script.php" required>
                    </div>
                    
                    <button type="submit">Add Task</button>
                </form>
            </div>
            
            <div id="executions" class="tab-content">
                <h2>Task Executions</h2>
                
                <?php if (empty($executions)): ?>
                    <p>No execution history found.</p>
                <?php else: ?>
                    <table>
                        <thead>
                            <tr>
                                <th>Timestamp</th>
                                <th>Command</th>
                                <th>Status</th>
                                <th>Duration</th>
                                <th>Exit Code</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <?php foreach ($executions as $index => $execution): ?>
                                <tr style="background-color: <?= $execution['status'] === 'SUCCESS' ? '#d4edda' : '#f8d7da' ?>;">
                                    <td><?= htmlspecialchars($execution['timestamp']) ?></td>
                                    <td><span class="code"><?= htmlspecialchars(strlen($execution['command']) > 50 ? substr($execution['command'], 0, 50) . '...' : $execution['command']) ?></span></td>
                                    <td>
                                        <span style="font-weight: bold; color: <?= $execution['status'] === 'SUCCESS' ? '#155724' : '#721c24' ?>;">
                                            <?= $execution['status'] ?>
                                        </span>
                                    </td>
                                    <td><?= $execution['duration'] ?>s</td>
                                    <td><?= $execution['exit_code'] ?></td>
                                    <td>
                                        <button onclick="showExecutionDetails(<?= $index ?>)" style="padding: 4px 8px; font-size: 12px;">Details</button>
                                    </td>
                                </tr>
                                <tr id="details-<?= $index ?>" style="display: none;">
                                    <td colspan="6" style="background-color: #f8f9fa; padding: 15px;">
                                        <div>
                                            <strong>Full Command:</strong><br>
                                            <span class="code"><?= htmlspecialchars($execution['command']) ?></span>
                                        </div>
                                        <?php if (!empty($execution['output'])): ?>
                                            <div style="margin-top: 10px;">
                                                <strong>Output:</strong><br>
                                                <pre style="background: #e9ecef; padding: 10px; border-radius: 5px; max-height: 200px; overflow-y: auto;"><?= htmlspecialchars($execution['output']) ?></pre>
                                            </div>
                                        <?php endif; ?>
                                        <?php if (!empty($execution['error'])): ?>
                                            <div style="margin-top: 10px;">
                                                <strong>Error:</strong><br>
                                                <pre style="background: #f8d7da; padding: 10px; border-radius: 5px; max-height: 200px; overflow-y: auto;"><?= htmlspecialchars($execution['error']) ?></pre>
                                            </div>
                                        <?php endif; ?>
                                    </td>
                                </tr>
                            <?php endforeach; ?>
                        </tbody>
                    </table>
                <?php endif; ?>
            </div>
            
            <div id="reports" class="tab-content">
                <h2>üìä Execution Reports (Last 30 Days)</h2>
                
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; margin-bottom: 30px;">
                    <div class="stat-card">
                        <h3>üìà Overview</h3>
                        <p><strong>Total Executions:</strong> <?= $stats['total_executions'] ?></p>
                        <p><strong>Success Rate:</strong> <?= $stats['success_rate'] ?>%</p>
                        <p><strong>Avg Duration:</strong> <?= $stats['average_duration'] ?>s</p>
                    </div>
                    
                    <div class="stat-card">
                        <h3>‚úÖ Successful</h3>
                        <p style="color: #28a745; font-size: 24px; font-weight: bold;"><?= $stats['successful_executions'] ?></p>
                    </div>
                    
                    <div class="stat-card">
                        <h3>‚ùå Failed</h3>
                        <p style="color: #dc3545; font-size: 24px; font-weight: bold;"><?= $stats['failed_executions'] ?></p>
                    </div>
                </div>
                
                <?php if (!empty($stats['commands'])): ?>
                    <h3>Command Performance</h3>
                    <table>
                        <thead>
                            <tr>
                                <th>Command</th>
                                <th>Total Runs</th>
                                <th>Success Rate</th>
                                <th>Avg Duration</th>
                                <th>Status</th>
                            </tr>
                        </thead>
                        <tbody>
                            <?php foreach ($stats['commands'] as $command => $cmdStats): ?>
                                <tr>
                                    <td><span class="code"><?= htmlspecialchars(strlen($command) > 60 ? substr($command, 0, 60) . '...' : $command) ?></span></td>
                                    <td><?= $cmdStats['total'] ?></td>
                                    <td>
                                        <span style="color: <?= $cmdStats['success_rate'] >= 90 ? '#28a745' : ($cmdStats['success_rate'] >= 70 ? '#ffc107' : '#dc3545') ?>;">
                                            <?= $cmdStats['success_rate'] ?>%
                                        </span>
                                    </td>
                                    <td><?= $cmdStats['avg_duration'] ?>s</td>
                                    <td>
                                        <?php if ($cmdStats['success_rate'] >= 90): ?>
                                            <span style="color: #28a745;">‚úÖ Healthy</span>
                                        <?php elseif ($cmdStats['success_rate'] >= 70): ?>
                                            <span style="color: #ffc107;">‚ö†Ô∏è Warning</span>
                                        <?php else: ?>
                                            <span style="color: #dc3545;">üö® Critical</span>
                                        <?php endif; ?>
                                    </td>
                                </tr>
                            <?php endforeach; ?>
                        </tbody>
                    </table>
                <?php endif; ?>
                
                <?php if (!empty($stats['recent_failures'])): ?>
                    <h3 style="margin-top: 30px; color: #dc3545;">Recent Failures</h3>
                    <table>
                        <thead>
                            <tr>
                                <th>Timestamp</th>
                                <th>Command</th>
                                <th>Exit Code</th>
                                <th>Error</th>
                            </tr>
                        </thead>
                        <tbody>
                            <?php foreach ($stats['recent_failures'] as $failure): ?>
                                <tr style="background-color: #f8d7da;">
                                    <td><?= htmlspecialchars($failure['timestamp']) ?></td>
                                    <td><span class="code"><?= htmlspecialchars(strlen($failure['command']) > 40 ? substr($failure['command'], 0, 40) . '...' : $failure['command']) ?></span></td>
                                    <td><?= $failure['exit_code'] ?></td>
                                    <td><?= htmlspecialchars(strlen($failure['error']) > 100 ? substr($failure['error'], 0, 100) . '...' : $failure['error']) ?></td>
                                </tr>
                            <?php endforeach; ?>
                        </tbody>
                    </table>
                <?php endif; ?>
                
                <?php if (!empty($stats['execution_trend'])): ?>
                    <h3 style="margin-top: 30px;">Daily Execution Trend</h3>
                    <div style="background: #f8f9fa; padding: 20px; border-radius: 5px;">
                        <?php 
                        $maxDaily = max(array_map(fn($day) => $day['total'], $stats['execution_trend']));
                        foreach (array_slice($stats['execution_trend'], -14, 14, true) as $date => $dayStats): 
                            $barWidth = $maxDaily > 0 ? ($dayStats['total'] / $maxDaily) * 100 : 0;
                        ?>
                            <div style="display: flex; align-items: center; margin-bottom: 8px;">
                                <div style="width: 80px; font-size: 12px;"><?= $date ?></div>
                                <div style="flex: 1; background: #e9ecef; height: 20px; border-radius: 3px; position: relative; margin: 0 10px;">
                                    <div style="background: linear-gradient(to right, #28a745 0%, #28a745 <?= ($dayStats['success'] / $dayStats['total']) * 100 ?>%, #dc3545 <?= ($dayStats['success'] / $dayStats['total']) * 100 ?>%, #dc3545 100%); height: 100%; width: <?= $barWidth ?>%; border-radius: 3px;"></div>
                                </div>
                                <div style="width: 100px; font-size: 12px; text-align: right;">
                                    <?= $dayStats['success'] ?>/<?= $dayStats['total'] ?> (<?= round(($dayStats['success'] / $dayStats['total']) * 100, 1) ?>%)
                                </div>
                            </div>
                        <?php endforeach; ?>
                    </div>
                <?php endif; ?>
            </div>
            
            <div id="import" class="tab-content">
                <h2>Import/Export Cron</h2>
                
                <div style="margin-bottom: 30px;">
                    <h3>Export Current Cron</h3>
                    <textarea readonly style="height: 150px;"><?= htmlspecialchars($cronManager->exportCron()) ?></textarea>
                </div>
                
                <div>
                    <h3>Import Cron Content</h3>
                    <form method="post">
                        <input type="hidden" name="action" value="import">
                        <div class="form-group">
                            <label for="cron_content">Paste cron content:</label>
                            <textarea id="cron_content" name="cron_content" placeholder="0 0 * * * /path/to/command&#10;*/5 * * * * /another/command" style="height: 150px;"></textarea>
                        </div>
                        <button type="submit" onclick="return confirm('This will replace all current tasks. Continue?')">Import</button>
                    </form>
                </div>
            </div>
            
            <div id="logs" class="tab-content">
                <h2>Activity Logs</h2>
                
                <?php if (empty($logs)): ?>
                    <p>No activity logs found.</p>
                <?php else: ?>
                    <div class="logs">
                        <?php foreach ($logs as $log): ?>
                            <?= htmlspecialchars($log) ?><br>
                        <?php endforeach; ?>
                    </div>
                <?php endif; ?>
            </div>
        </div>
    </div>
    
    <script>
        function showTab(tabName) {
            // Hide all tab contents
            const contents = document.querySelectorAll('.tab-content');
            contents.forEach(content => content.classList.remove('active'));
            
            // Remove active class from all tabs
            const tabs = document.querySelectorAll('.tab');
            tabs.forEach(tab => tab.classList.remove('active'));
            
            // Show selected tab content
            document.getElementById(tabName).classList.add('active');
            
            // Add active class to clicked tab
            event.target.classList.add('active');
        }
        
        function editTask(taskId, schedule, command) {
            // Hide all edit forms
            const editForms = document.querySelectorAll('.edit-form');
            editForms.forEach(form => form.classList.remove('active'));
            
            // Show the specific edit form
            document.getElementById('edit-' + taskId).classList.add('active');
        }
        
        function cancelEdit(taskId) {
            document.getElementById('edit-' + taskId).classList.remove('active');
        }
        
        function showExecutionDetails(index) {
            const detailsRow = document.getElementById('details-' + index);
            if (detailsRow.style.display === 'none') {
                detailsRow.style.display = 'table-row';
            } else {
                detailsRow.style.display = 'none';
            }
        }
    </script>
</body>
</html>

// example_crontab.txt (for testing on Windows)
# Example crontab content for testing
# This file simulates a real crontab export

# Run backup every day at 2 AM
0 2 * * * /usr/local/bin/backup.sh

# Clear temp files every hour
0 * * * * /usr/bin/find /tmp -name "temp_*" -delete

# Send weekly report every Sunday at 9 AM
0 9 * * 0 /usr/local/bin/weekly-report.php

# Check disk space every 30 minutes
*/30 * * * * /usr/local/bin/check-diskspace.sh

# Update database every 6 hours
0 */6 * * * /usr/bin/php /var/www/html/update-db.php

# .htaccess (for Apache)
RewriteEngine On
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule ^(.*)$ index.php [QSA,L]

# README.md
# Cron Task Manager

A PHP 8.2 application for managing cron tasks with a web interface, following PSR-12 standards.

## Features

- ‚úÖ View, add, edit, and delete cron tasks
- ‚úÖ Cross-platform compatibility (Linux/Windows)
- ‚úÖ Activity logging and tracking
- ‚úÖ Import/Export cron configurations
- ‚úÖ Cron schedule validation
- ‚úÖ Clean web interface
- ‚úÖ PSR-12 compliant code

## Setup

### Linux (Production)
1. Install PHP 8.2+ and Apache/Nginx
2. Clone/upload files to web directory
3. Run `composer install`
4. Set proper permissions for log files
5. Access via web browser

### Windows (Testing)
1. Install PHP 8.2+ and a local server (XAMMP/WAMP)
2. Place files in web directory
3. Create `crontab.txt` with sample cron content
4. Run `composer install`
5. Access via localhost

## Usage

1. **View Tasks**: See all current cron tasks with human-readable descriptions
2. **Add Tasks**: Use the web form with cron schedule validation
3. **Edit Tasks**: Click edit button to modify existing tasks
4. **Delete Tasks**: Remove tasks with confirmation
5. **Import/Export**: Backup and restore cron configurations
6. **Activity Logs**: Track all changes made to cron tasks

## File Structure

```
/project-root
‚îú‚îÄ‚îÄ composer.json
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îî‚îÄ‚îÄ CronManager.php
‚îú‚îÄ‚îÄ public/
‚îÇ   ‚îî‚îÄ‚îÄ index.php
‚îú‚îÄ‚îÄ crontab.txt (Windows testing)
‚îú‚îÄ‚îÄ cron_tasks.log (auto-created)
‚îî‚îÄ‚îÄ README.md
```

## Cron Schedule Format

- `* * * * *` - minute hour day month weekday
- `0 0 * * *` - Daily at midnight
- `*/15 * * * *` - Every 15 minutes
- `0 9 * * 1` - Every Monday at 9 AM

## Security Notes

- Validate all inputs
- Use file locking for concurrent access
- Sanitize commands before execution
- Consider access restrictions for production use
